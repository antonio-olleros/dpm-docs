{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DPM Expression Language (DPM-XL) Documentation","text":"<p>Welcome to the comprehensive documentation for the Data Point Model Expression Language (DPM-XL), a formal language for expressing data validation and calculation requirements in regulatory reporting.</p>"},{"location":"#what-is-dpm-xl","title":"What is DPM-XL?","text":"<p>The DPM Expression Language is a formal, business-user-friendly language that enables the specification of:</p> <ul> <li>Data validation rules for regulatory reporting</li> <li>Calculation formulas for derived data points</li> <li>Data transformation operations across reporting tables</li> <li>Cross-module validations and consistency checks</li> </ul> <p>DPM-XL serves as the foundation for automated validation systems used by regulatory authorities such as EBA and EIOPA.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#business-oriented","title":"\ud83c\udfaf Business-Oriented","text":"<p>Designed for business users who understand regulatory requirements but may not be programmers.</p>"},{"location":"#formally-specified","title":"\u26a1 Formally Specified","text":"<p>Fully formalized syntax and semantics enable automated compilation and execution.</p>"},{"location":"#dual-representation","title":"\ud83d\udd04 Dual Representation","text":"<ul> <li>DPM-XL: Human-readable expression language</li> <li>DPM-ML: Machine-readable metamodel representation</li> </ul>"},{"location":"#rich-data-model","title":"\ud83d\udcca Rich Data Model","text":"<p>Supports complex data structures including scalars, sets, and multi-dimensional recordsets.</p>"},{"location":"#robust","title":"\ud83d\udee1\ufe0f Robust","text":"<p>Comprehensive null handling, type system, and error management.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple DPM-XL expression:</p> <pre><code>{F_01.01, r0010, c0010} = {F_01.01, r0020, c0010} + {F_01.01, r0030, c0010}\n</code></pre> <p>This expression validates that the value in table F_01.01, row 0010, column 0010 equals the sum of rows 0020 and 0030 in the same column.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized to take you from basic concepts to advanced implementation:</p>"},{"location":"#introduction","title":"\ud83d\udcda Introduction","text":"<p>Learn about the motivation, design principles, and relationship between DPM-XL and DPM-ML.</p>"},{"location":"#information-model","title":"\ud83c\udfd7\ufe0f Information Model","text":"<p>Understand the core data structures: operations, artifacts (scalars, sets, recordsets), and data types.</p>"},{"location":"#language-specification","title":"\ud83d\udcdd Language Specification","text":"<p>Master the syntax rules, data selection mechanisms, and language features.</p>"},{"location":"#operators","title":"\u2699\ufe0f Operators","text":"<p>Comprehensive reference for all operators, organized by category: - Selection, Numeric, Comparison, Logical - Aggregate, Conditional, String, Time, Clause</p>"},{"location":"#dpm-ml","title":"\ud83d\udd27 DPM-ML","text":"<p>Learn about the metamodel representation and tree structures.</p>"},{"location":"#reference","title":"\ud83d\udcd6 Reference","text":"<p>Quick reference materials, grammar specifications, and operator summaries.</p>"},{"location":"#examples","title":"\ud83d\udca1 Examples","text":"<p>Practical examples from basic usage to complex edge cases.</p>"},{"location":"#who-should-use-this-documentation","title":"Who Should Use This Documentation?","text":""},{"location":"#regulatory-specialists","title":"Regulatory Specialists","text":"<p>Writing validation rules and calculations for regulatory frameworks.</p>"},{"location":"#software-developers","title":"Software Developers","text":"<p>Building engines and tools that execute DPM-XL expressions.</p>"},{"location":"#implementation-teams","title":"Implementation Teams","text":"<p>Integrating DPM-XL into reporting systems and validation pipelines.</p>"},{"location":"#standard-bodies","title":"Standard Bodies","text":"<p>Understanding the formal specification for governance and evolution.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<p>This documentation aims to be comprehensive and self-contained. Each section includes:</p> <ul> <li>Clear explanations of concepts</li> <li>Formal specifications where needed</li> <li>Practical examples</li> <li>Edge case handling</li> </ul> <p>For the most current information and updates, please refer to the official DPM standards documentation.</p> <p>Navigation Tip</p> <p>Use the navigation menu on the left to explore different sections. Each section builds upon previous concepts, so we recommend following the order for first-time readers.</p>"},{"location":"information-model/01-introduction/","title":"Introduction","text":"<p>This is a technical document specifying the Information Model, the Data Types and other technical characteristics of the DPM Operations.</p> <p>This documentation is mainly addressed to technical audiences with interest in developing engines or in having a better technical understanding of the DPM Operations. The document is not addressed to normal business users that write calculations, although it can be useful for those users with basic knowledge of information models and programming languages.</p> <p>In any case, this document is complemented by the document describing the operators used for the operations, which should be the main reference for users writing calculations.</p>"},{"location":"information-model/01-introduction/#why","title":"Why","text":"<p>EBA and EIOPA have been using for some years a semi-formal expression language for business users to write and share their data validation requirements.</p> <p>The fact that is semi-formal allows automating some aspects for translating the expression into another language (e.g., XBRL Formula Link base). But because it is not completely formal, it is, by definition, not possible to create a compiler that fully automates the translation to another language or an interpreter for it.</p> <p>This document, and its complementary document on the operators, aims to provide this required formalization so that DPM Operations become fully formalised, therefore enabling the automation regarding the calculations written by EBA and EIOPA.</p>"},{"location":"information-model/01-introduction/#dpm-xl-and-dpm-ml","title":"DPM-XL and DPM-ML","text":"<p>The DPM Operations have two representations: As expressions, with the DPM eXpression Language (DPM-XL) and as a structured representation in the database following a metamodel (DPM Metamodel Language or DPM-ML).</p> <p>The reason for having DPM-XL is that it is the language business users write and can understand. Because it is the input of all the process, it is important to keep this language formal, so that it can be translated and executed. But, at the same time, it must serve for communication, so it has to be business users friendly, implying, among others, that the operands of the language are referred to by using rendering artifacts (tables, row, columns and sheets).</p> <p>A key requirement for the DPM-XL has been that the language that is currently used should change as little as possible. So, in practice, the formalisation of the language has been a reverse-engineering process, where the starting point where the validations published by the EBA and EIOPA.</p> <p>The main reasons for having DPM-ML are that it is providing a structured version of the calculations, with no need to parse expressions, and that it is referring to variables, which are stable over time, because they represent business concepts, instead of rendering objects, which change often over time and do not hold any business meaning, but just a representation.</p> <p>The DPM-ML is automatically derived from the DPM-XL and, eventually, can be also derived from languages other than the DPM-XL. DPM-ML relations to languages other than DPM-XL is out of the scope for this documentation. Instead, the documentation provides details on how operations are represented both in DPM-XL and DPM-ML. The DPM-XL and DPM-ML share the same operators and the same information model.</p>"},{"location":"information-model/01-introduction/#how","title":"How","text":"<p>The formalisation of the language has tree pillars:</p> <ol> <li>Information model: Specifies the artefacts that the language is using.</li> <li>Grammar: Technical definition of the syntax of the language. Allows developers to build parsers for the language. It is provided in a separate file following the EBNF (Extended Backus-Naur form) notation (Only applicable to DPM-XL).</li> <li>Semantic specification: Semantics for all operators of the language, specifying formally their constraints and behaviour.</li> </ol> <p>This document deals with the information model, while the grammar and semantic specification are provided as separate documents.</p> <p>The Validation and Transformation Language specification has been used as an inspiration for this specification.</p>"},{"location":"information-model/02-information-model/","title":"2 Information Model","text":""},{"location":"information-model/02-information-model/#21-operations","title":"2.1 Operations","text":"classDiagram     class Script     class Operation     class Result     class Operand     class Operator     class LanguageArtifact     class Output     Class Input      Script *-- Operation     Operation --&gt; \"1..1\" Result : Produces     Operation --&gt; \"0..n\" Operand : Acts on     Operation --&gt; \"0..n\" Operator: Uses     Result --|&gt; LanguageArtifact     Operand --|&gt; LanguageArtifact     Operator --&gt; \"1..1\" Output : Produces     Operator --&gt; \"0..n\" Input : Uses     Output --&gt; Input     Operand --&gt; Input      style Script fill:#0098f6     style Operation fill:#0098f6     style Result fill:#0098f6     style Operand fill:#0098f6     style Operator fill:#0098f6     style LanguageArtifact fill:#04f286     style Input fill:#0098f6     style Output fill:#0098f6  <p>The DPM Operations serve to write Scripts, which are computer programs that constitute a run-time and are composed of Operations.</p> <p>Operations are expressions that use input operands and/or operators to produce a result.</p> <p>Expressions are finite combinations of symbols that are well-formed according to the syntactical rules of the language. Expressions compose some operands in a certain order by means of the operators of the language, to obtain the desired result. The symbols of the expression designate operators, operands, and the order of application of the operators.</p> <p>Operators specify a type of operation to be performed on some input operands (exceptionally, there may be operators that do not take operands as input, e.g., an operator to get the current time) to generate an output. The output produced by one operator may be used as input for another operator (i.e., operators can be nested).</p> <p>Operands are specific artifacts from the DPM Expression Language referenced in an expression as input.</p> <p>The result produced by an operation is also a specific artifact from the DPM Expression Language.</p>"},{"location":"information-model/02-information-model/#22-language-artifacts","title":"2.2 Language artifacts","text":"classDiagram     class LanguageArtifact     class Recordset     class Scalar     class ScalarSet     class DataType      Recordset --|&gt; LanguageArtifact     Scalar --|&gt; LanguageArtifact     ScalarSet --|&gt; LanguageArtifact      Recordset --&gt; DataType : Defined on     Scalar --&gt; DataType : Defined on     ScalarSet --&gt; \"1..n\" Scalar      style LanguageArtifact fill:#04f286     style Recordset fill:#04f286     style Scalar fill:#04f286     style ScalarSet fill:#04f286     style DataType fill:#ecdc0a  <p>DPM Expression Language calculations can operate on and generate as results three different type of Artifacts.</p>"},{"location":"information-model/02-information-model/#221-scalars","title":"2.2.1 Scalars","text":"<p>Scalars are individual values of a certain Data Type.</p>"},{"location":"information-model/02-information-model/#222-scalar-sets","title":"2.2.2 Scalar sets","text":"<p>Scalar Sets are sets of Scalar values defined on the same Data Type. Scalar Sets are typically used with the in operator.</p>"},{"location":"information-model/02-information-model/#223-recordsets","title":"2.2.3 Recordsets","text":"classDiagram     class Recordset     class Records     class Structure     class Component     class KeyComponent     class FactComponent     class AttributeComponent     class DataType      Recordset *-- Records     Recordset --&gt; Structure : Structured by     Structure *-- Component     Component --&gt; DataType : Defined on     KeyComponent --|&gt; Component     FactComponent --|&gt; Component     AttributeComponent --|&gt; Component        style Recordset fill:#04f286     style Records fill:#04f286     style Structure fill:#04f286     style Component fill:#04f286     style KeyComponent fill:#04f286     style FactComponent fill:#04f286     style AttributeComponent fill:#04f286     style DataType fill:#ecdc0a  <p>Recordset are collections of Records that share a same Structure. Technically, Recordsets are two-dimensional labelled data structures (tabular), which can be assimilated to Relational Tables or Data Frames. The columns (fields) of the Recordset are provided by the Components of its Structure. The rows of the Recordset are its composing Records.</p> <p>The Structure of the Recordset is a collection of Components, which can have one of three roles: Key, Fact or Attribute. Each Component has a name, which must be unique within the Recordset. Key and Attribute Components are defined on a Data Type. Fact Components may be defined on more than one Data Type, when more than one variable is selected. In any case, the Data Type is known for each selected Variable.</p> <p>Each Record of the Recordset is individually identified by the combination of the values for its Key Components.</p> <p>A Recordset having no Key Components behaves like a Scalar.</p>"},{"location":"information-model/02-information-model/#2231-key-components","title":"2.2.3.1 Key components","text":"classDiagram     class KeyComponent     class StandardKey     class DpmKey     class DpmXlStandardKey     class DpmMlStandardKey     class RowKey     class ColumnKey     class SheetKey     class XIndexKey     class YIndexKey     class ZIndexKey      StandardKey --|&gt; KeyComponent     DpmKey --|&gt; KeyComponent     DpmXlStandardKey --|&gt; StandardKey     DpmMlStandardKey --|&gt; StandardKey     RowKey --|&gt; DpmXlStandardKey     ColumnKey --|&gt; DpmXlStandardKey     SheetKey --|&gt; DpmXlStandardKey     XIndexKey --|&gt; DpmMlStandardKey     YIndexKey --|&gt; DpmMlStandardKey     ZIndexKey --|&gt; DpmMlStandardKey          style KeyComponent fill:#04f286     style StandardKey fill:#04f286     style DpmKey fill:#04f286     style DpmXlStandardKey fill:#04f286     style DpmMlStandardKey fill:#04f286     style RowKey fill:#04f286     style ColumnKey fill:#04f286     style SheetKey fill:#04f286     style XIndexKey fill:#04f286     style YIndexKey fill:#04f286     style ZIndexKey fill:#04f286  <p>Key Component may be Standard or DPM. Standard Key Components are different for DPM-ML and DPM-XL, although their behaviour is the same.</p> <p>Standard Key Components are common to all the Recordsets, independently on how the Variables are defined in the DPM. For each Recordset, there may be 0 or 1 occurrence of each subtype of Standard Key Component.</p>"},{"location":"information-model/02-information-model/#22311-standard-dpm-xl-key-components","title":"2.2.3.1.1 Standard DPM-XL Key Components","text":"<ul> <li>Row Key: Identifies the Row Ordinate from a Report Table where the selected Variable is located. Arises in Variable Set Selections, when more than one Row for one Report Table is selected. The name for the component is \"r\". It is defined on the String Data Type.</li> <li>Column Key: Identifies the Column Ordinate from a Report Table where the selected Variable is located. Arises in Variable Set Selections, when more than one Colum for one Report Table is selected. The name for the component is \"c\". It is defined on the String Data Type.</li> <li>Sheet Key: Identifies the Sheet Ordinate from a Report Table where the selected Variable is located. Arises in Variable Set Selections, when more than one Sheet for one Report Table is selected. The name for the component is \"s\". It is defined on the String Data Type.</li> </ul>"},{"location":"information-model/02-information-model/#22312-standard-dpm-ml-key-components","title":"2.2.3.1.2 Standard DPM-ML Key Components","text":"<p>Regarding the DPM-ML, the Standard Components are three indexes, which do not represent any DPM object. They just serve to make sure that the right variables are matched together when used with an operator. The names for these Components are \"x\", \"y\" and \"z\". Note that these indexes do not necessarily correspond to rows, columns, and sheets. During the conversion from DPM-XL, the values of the indexes for each variable shall be provided according to algorithms.</p>"},{"location":"information-model/02-information-model/#22313-dpm-key-components","title":"2.2.3.1.3 DPM Key Components","text":"<p>DPM Key Components are specific to how data is defined in the DPM. Arise when Open Variables are selected, and a Recordset will have one DPM Key Component per each Key Variable associated to the selected Variables.</p> <p>The name for the DPM Key Components is the Code of the Property associated to the DPM Key Variable.</p>"},{"location":"information-model/02-information-model/#2232-fact-component","title":"2.2.3.2 Fact Component","text":"<p>A Recordset has one mandatory, and only one, Fact Component. The name for the component is \"f\" Its data type depends on the Data Type of the selected Variables.</p> <p>If a DPM Key Variable is selected, the resulting Recordset will have the values for that Variable in the Fact Component, on top of having them in their corresponding Key Component. See example in section 2.2.4.4.</p>"},{"location":"information-model/02-information-model/#2233-attribute-components","title":"2.2.3.3 Attribute Components","text":"<p>Attribute Components provide additional information to the Fact value.</p> <p>DPM Attribute Components are specific to how data is defined in the DPM. Arise when a Variable with associated Attribute Variable is selected. A Recordset will have one DPM Attribute Component per each Property or Metric associated to any Attribute Variable associated to the selected Variables.</p> <p>The name for the DPM Attribute Components is the Code of the Property associated to the DPM Attribute Variable.</p>"},{"location":"information-model/02-information-model/#224-examples","title":"2.2.4 Examples","text":"<p>Recordsets arise from Open Variable selections or from selection of multiple Variables.</p>"},{"location":"information-model/02-information-model/#2241-closed-variable-selection","title":"2.2.4.1 Closed Variable Selection","text":"<p>For instance, taking as an example EBA's Table F 01.01:</p> <p></p> <pre><code>{tF_01.01, r0010, c0010}\n</code></pre> <p>In the context of a single instance (i.e., disregarding the \"ref_date\" and the \"subject\"), selects a Recordset without Key Components, which works as a scalar with value 100.</p> <p>In the context of data with multiple dates and/or reference dates, and supposing that the data refer to the subject with code \"id123\" and to the date 31/12/2020, and that it has been reported with a 1 precision (attribute):</p> subject ref_date f p id123 2020-12-31 100 1"},{"location":"information-model/02-information-model/#2242-open-variable-selection","title":"2.2.4.2 Open Variable Selection","text":"<pre><code>{F 40.01 c0031}\n</code></pre> <p>Selects an Open Variable. In this illustrative example, yields a Recordset with three Records. The Recordset, in the context of a single instance, has two DPM Key Components, because the selected Variable (the one rendered in Column 0031 of Report Table F 40.01) is associated in the DPM to a Key with two Key Variables. These Key Variables are associated to Properties with codes \"LIN\" (rendered in Column 0011) and \"TYC\" (rendered in Column 0015).</p> <p>The following table represents the Recordset:</p> LIN TYC f 123456 LEI Name 1 123456 ISIN Name 2 1111 LEI Name 3"},{"location":"information-model/02-information-model/#2243-variable-set-selection","title":"2.2.4.3 Variable Set Selection","text":"<pre><code>{F 20.05 r0020-0030, c0010}\n</code></pre> <p>This case selects a set of Variables because the selection includes more than one Row. This implies that the Row Key Component applies to this Recordset. Besides, the selected Variables are associated to a Key with a single Key Variable, which is associated to a property with code \"RCP\".</p> RCP r f ES 0020 200 ES 0030 300 PT 0020 500 PT 0030 600 <p>In this case, the recordset for the DPM-ML would be slightly different because of the change in the Standard Key Component. Instead of the row, we would have any of the three indexes. For instance, using the x index:</p> RCP x f ES 1 200 ES 2 300 PT 1 500 PT 2 600 <p>Note that the important thing for DPM-ML to be consistent is that all the records with the same row share the same index.</p>"},{"location":"information-model/02-information-model/#2244-key-variable-selection","title":"2.2.4.4 Key Variable Selection","text":"<pre><code>{F 40.01 c0015}\n</code></pre> <p>Selects an Open Key Variable. The Recordset, in the context of a single instance, has two DPM Key Components, because the selected Variable (the one rendered in Column 0015 of Report Table F 40.01) is associated in the DPM to a Key with two Key Variables (in fact, it is part of the Key). These Key Variables are associated to Properties with codes \"LIN\" (rendered in Column 0011) and \"TYC\" (rendered in Column 0015).</p> <p>The following table represents the Recordset:</p> LIN TYC f 123456 LEI LEI 123456 ISIN ISIN 1111 LEI LEI <p>Note that the resulting Recordset has the values for the type of code two times, one as Key Component and another as Fact Component. This is necessary to allow doing calculations on the Fact while keeping all the Records in the Recordset uniquely identified.</p>"},{"location":"information-model/02-information-model/#23-data-types","title":"2.3 Data types","text":"<p>DPM Operations data types are defined with the principle: Create only a data type if they have different behaviour to other data types with at least one operator.</p> <p>The data types are:</p> <ul> <li>String: Sequence of alphanumeric characters of any length.</li> <li>Number: Is a rational number of any magnitude and precision, also used as approximation of a real number. Numbers can be treated as points or as intervals. Intervals are defined as a centre plus and minus a radius (c \u00b1 r). The centre is the input value provided. The radius is calculated based on the precision of the number as 10\u207b\u1d56/2.</li> <li>Integer: Positive and negative integer numbers and zero. It Is a subtype of the type number. As number subtypes, integers can be treated as intervals.</li> <li>Time interval denotes time intervals of any duration and expressed with a precision. According to ISO 8601 (ISO standard for the representation of dates and times), a time interval is the intervening time between two time points.</li> <li>Date is a subtype of the type time which denotes time points expressed at any precision, which are time intervals starting and ending in the same time point (i.e., intervals of zero duration). A value of type date includes all the parts needed to identify a time point at the desired precision, like the year, the month, the day, the hour, the minute and so on (for example, 2018-04-05 is the fifth of April 2018, at the precision of the day).</li> <li>Time period is a subtype of the type time, and denotes non-overlapping time intervals having a regular duration (for example the years, the quarters of years, the months, the weeks and so on). A value of the type time period is composite and must include all the parts needed to identify a regular time period at the desired precision; in particular, the time-period type includes the explicit indication of the kind of regular period considered (e.g., \"day\", \"week\", \"month\", \"quarter\" \u2026). For example, the value 2018M04, assuming that \"M\" stands for \"month\", denotes the month n.4 of the 2018 (April 2018). Moreover, 2018Q2, assuming that \"Q\" stands for 1896 \"quarter\", denotes the second quarter of 2018. In these examples, the letters M and Q are used to denote the kind of period through its duration.</li> <li>Boolean: denotes a logical binary state, meaning either \"true\" or \"false\".</li> <li>Category items: A reference to the code of a Category Item.</li> <li>Subcategories: A reference to the code of a Subcategory.</li> </ul>"},{"location":"information-model/02-information-model/#231-correspondences-with-dpm-data-types","title":"2.3.1 Correspondences with DPM data types","text":"<p>The DPM provides a wider list of data types. This is because greater granularity in the data typology may be useful for reporting or representation purposes (e.g., a monetary amount requires a currency attribute, while a pure number does not).</p> <p>For each DPM data type there is one, and only one DPM Operations data type.</p>"},{"location":"information-model/02-information-model/#232-casting","title":"2.3.2 Casting","text":"<p>The casting between data types is possible. Casting can be done explicitly, if the cast operator is used, or implicitly when it is allowed. The following table contains all the casting options.</p> String Number Integer Time interval Date Time period Duration Boolean Item Subcategory String Explicit Explicit Explicit Explicit Explicit Explicit Explicit Explicit Explicit Number Implicit Explicit Not possible Not possible Not possible Not possible Not possible Not possible Not possible Integer Implicit Implicit Not possible Not possible Not possible Not possible Not possible Not possible Not possible Time interval Implicit Not possible Not possible Explicit Explicit Not possible Not possible Not possible Not possible Date Implicit Not possible Not possible Implicit Explicit Not possible Not possible Not possible Not possible Time period Implicit Not possible Not possible Implicit Not possible Not possible Not possible Not possible Not possible Duration Implicit Not possible Not possible Not possible Not possible Not possible Not possible Not possible Not possible Boolean Implicit Not possible Not possible Not possible Not possible Not possible Not possible Not possible Not possible Item Implicit Not possible Not possible Not possible Not possible Not possible Not possible Not possible Not possible Subcategory Implicit Not possible Not possible Not possible Not possible Not possible Not possible Not possible Not possible"},{"location":"information-model/02-information-model/#233-conventions-to-write-scalars","title":"2.3.3 Conventions to write scalars","text":"<p>To the effects of DPM-XL, when writing scalars, the following conventions should be followed:</p> <ul> <li>String: Between double quotes (\"this is a string\") or single quotes ('this is also a string')</li> <li>Number: Sequence of numeric digits. Dot (\".\") shall be used to separate the decimal and the integer part.</li> <li>Integer: Sequence of numeric digits.</li> <li>Time Follows ISO 8601 (ISO standard for the representation of dates and times). Dates shall be written between hashes (#). A valid time representation is #2021-11-25/2021-12-25#</li> <li>Date #2021-11-25#.</li> <li>Time period #2021Q4#.</li> <li>Duration Following ISO8601: P[n]Y[n]M[n]DT[n]H[n]M[n]S. E.g.,: #P3Y6M4DT12H30M5S#</li> <li>Boolean: true or false.</li> <li>DPM objects: A string between brackets with two arguments, first the type and second the code. E.g., [item, eba_RT:x11], [subcategory, eba_CU:iso_currencies]</li> </ul>"},{"location":"information-model/03-data-selection/","title":"3 DPM-XL data selection","text":"<p>The data for the expression language is selected by referencing the DPM Cells and Key Variables of DPM Report Tables.</p> <p>The references to the Cells and Key variables are done by means of the table codes, ordinate codes and the codes of the Properties associated to the Key Variables.</p> <p>The data selection is done by the interaction of the selection operator, represented by the curly brackets symbol, and the general scope of an expression, provided by the with operator. With this interaction, it is possible to individuate individual DPM Variables or sets of them. The actual data are referring to DPM Variables, thus making it possible to obtain the data required for the calculations.</p> <p>The selection of data, together with the DPM definitions, make it possible to determine the Structure of the Recordset on compile-time.</p>"},{"location":"information-model/04-null-treatment/","title":"4 Null in DPM Expression Language","text":""},{"location":"information-model/04-null-treatment/#41-null-and-data-types","title":"4.1 Null and data types","text":"<p>All the Data Types are assumed to contain the conventional value null, which means \"no value\", or \"absence of known value\" or \"missing value\". Note that the null value, therefore, is the only value of multiple different types.</p> <p>For the String Data Type, null is considered equivalent to the empty string.</p>"},{"location":"information-model/04-null-treatment/#42-implicit-an-explicit-null-values","title":"4.2 Implicit an explicit null values","text":"<p>For Recordsets, nulls may arise in a selection for two reasons:</p> <ul> <li>Explicit null: In the input data for the engine, there is a record without a value.</li> <li>Implicit null: In the input data for the engine, there is no record for one of the Variables in the selection. In this case, the engine will generate a record for that variable with a null value, or another specified default (see Selection Operator in part 2).</li> </ul> <p>In any case, there are no differences in how implicit or explicit nulls are treated.</p>"},{"location":"information-model/04-null-treatment/#43-null-treatment","title":"4.3 Null treatment","text":"<p>In general, most of the operations return null when any of their arguments is null.</p> <ul> <li>Comparison operators (e.g., -, &gt;): if a null is involved in the operation, then the result is null.</li> <li>Arithmetic operators (e.g., + , -, *): if a null is involved in the operation, then the result is null.</li> <li>String operators: null is considered an empty string.</li> <li>Logical operators (and, or, xor, not): Three-value logic is adopted with the consideration that null means unknown. The concrete results for each operator are specified in part 2, in the description of the operators.</li> <li>Conditional operators: null is considered equivalent to false.</li> <li>Filtering: null is considered equivalent to false (i.e., the Records with a null value are not selected in the filter).</li> <li>Aggregations (e.g., sum, avg, max): nulls are excluded from the calculations.</li> <li>Intervals: If the centre is null, the radius is also null.</li> </ul>"},{"location":"information-model/04-null-treatment/#44-overriding-the-standard-null-treatment","title":"4.4 Overriding the standard null treatment","text":"<p>The standard null treatment can be overriding by substituting the null values for other values. This can be done in two ways:</p> <ul> <li>With the Selection Operator: It is possible to set a default value in the selection for the null values.</li> <li>With the nvl Operator: serves to substitute nulls for any value.</li> </ul>"},{"location":"information-model/05-dpm-ml/","title":"5 DPM-ML Metamodel","text":""},{"location":"information-model/05-dpm-ml/#51-operation-and-operationversion","title":"5.1 Operation and OperationVersion","text":"<p>Operations have a code and can be grouped.</p> <p>Groups of operations refer to the cases where users define a parent validation and the system derives automatically children validations. There can only be two levels of operations (i.e., a child validation cannot be the parent of another validation). The types of validations that generate children are Variant and Property constraint validations (see below).</p> <p>Operations and may be of any of 4 types:</p> <ul> <li>Validation: Operations that serve to validate the consistency of data. They can provide as output a scalar Boolean value or a recordset with scalar values.</li> <li>Calculation: Operations that serve to derive new data. They can provide as output any kind of data.</li> <li>Precondition: Operations that serve to determine whether one or more validations shall be applied. They can only provide as output a scalar Boolean value.</li> <li>Conditional_severity: Operations that serve to determine the severity of an invalid result for a validation. It can yield a value 'error' or 'warning'</li> </ul> <p>Operations are also classified based on their source for generation as:</p> <ul> <li>User_defined: Operations that have been defined by users.</li> <li>Hierarchy: Validations that have been automatically generated by the system based on the contents of subhierarchies.</li> <li>Sign: Validations that have been automatically generated by the system based on the contents of the Sign attribute for TableVersionCells.</li> <li>Existence: Validations that have been automatically generated by the system based on the IsNullable attribute for TableVersionCells.</li> <li>Variant: Validations that are defined at the level of TableGroups, including the individual validations generated from them.</li> <li>Property_contstraint: Validations that are defined at the level of a property, and from which individual instances of validations based on variables are generated.</li> </ul> <p>Operations can have many versions. A new version of an operation is required whenever any of the following attributes change:</p> <ul> <li>Expression: The DPM-XL expression of the version.</li> <li>Description: Natural language description of what the validation is aimed to check.</li> <li>PreconditionOperation: A link to an operation version that acts as precondition.</li> <li>SeverityOperation: A link to an operation that determines the conditional severity.</li> </ul>"},{"location":"information-model/05-dpm-ml/#52-operation-tree","title":"5.2 Operation tree","text":""},{"location":"information-model/05-dpm-ml/#521-operation-nodes","title":"5.2.1 Operation nodes","text":"<p>The tree representation of an OperationVersion is provided in the OperationNode table.</p> <p>Any Operation can be represented as a hierarchical tree, where the arguments of one Operator are represented.</p> <p>For instance, the expression:</p> <pre><code>A = B + C\n</code></pre> <p>Can be represented as:</p> <pre><code>    =\n   / \\\n  A   +\n     / \\\n    B   C\n</code></pre> <p>Where \"=\" and \"+\" are operators, and \"A\", \"B\" and \"C\" are operands.</p> <p>This kind of tree is represented in the OperationNode table.</p>"},{"location":"information-model/05-dpm-ml/#522-operands-representation","title":"5.2.2 Operands' representation","text":"<p>All Operands are represented as OperationNodes.</p> <p>Operands that are Scalars not representing a DPM Object (like an Item) are completely represented in the OperationNode table.</p> <p>Scalar Operands that are referring to a DPM Object need to be further specified with the tables OperandSource and OperandReference, which provide the reference to the DPM Object.</p> <p>Operands that are Variables and Sets of Variables need also to be further specified with the tables OperandSource and OperandReference. Concretely, for Sets of Variables, it is important to determine the index of each Variable in the context of the Operand, to be able to match the variables to which the operator applies.</p>"},{"location":"information-model/05-dpm-ml/#523-representation-example","title":"5.2.3 Representation example","text":"<p>For instance, suppose a table (Tab1) with three rows (100, 200 and 300), two columns (100 and 200) and two sheets.</p> <p>Sheet A</p> Column 100 Column 200 Row 100 1 4 Row 200 2 5 Row 300 3 6 <p>Sheet B</p> Column 100 Column 200 Row 100 7 10 Row 200 8 11 Row 300 9 12 <p>Note that each number in the cells represents the ID of the corresponding Variable.</p> <p>The following expression:</p> <pre><code>{tTab1, r100, c*, s*} = 2 * ({tTab1, r200, c*, s*} + {tTab1, r300, c*, s*})\n</code></pre> <p>Would be represented as the following tree:</p> <pre><code>             =\n           /   \\\n{tTab1, r100, c*, s*}   *\n                       / \\\n                      2   +\n                         / \\\n           {tTab1, r200, c*, s*} {tTab1, r300, c*, s*}\n</code></pre> <p>The representation in the DB would be as follows (only the relevant fields are shown, and for operators and argument simbols are used):</p> <p>OperationNode table</p> NodeId ParentNodeID Operator Argument OperandSourceId Scalar 1 = 2 1 left oprnd1 3 1 * right 4 3 left 2 5 3 + right 6 5 left oprnd2 7 5 right oprnd3 <p>OperandReference table</p> NodeID x y z VariableID 2 1 1 1 1 2 2 1 1 4 2 1 1 2 7 2 2 1 2 10 6 1 1 1 2 6 2 1 1 5 6 1 1 2 8 6 2 1 2 11 7 1 1 1 3 7 2 1 1 6 7 1 1 2 9 7 2 1 2 12 <p>Note that the operations shall be applied to the variables having the same index. For instance, Variable 1 = 2 * (Variable 2 + Variable 3), because all of them have the index y=1 and z=1.</p>"},{"location":"information-model/05-dpm-ml/#53-operation-scope","title":"5.3 Operation Scope","text":"<p>Each operation version can be applied in different scopes. An operation scope refers to the individual module versions or sets of module versions (for cross-module validations) to which the operation logically applies.</p> <p>For each operation scope, there may be different values for the attributes:</p> <ul> <li>IsActive: Determines whether the operation shall be run for a certain scope.</li> <li>Severity: Determines the severity of the error, if the validation is not passed.</li> <li>FromSubmissionDate: Sets a date from which the validation applies to subsequent submissions.</li> </ul>"},{"location":"information-model/05-dpm-ml/#54-variable-calculation","title":"5.4 Variable calculation","text":"<p>For calculations (i.e., operations that serve to calculate values for variables), it is necessary to link the operation to the actual variable that is generated. This is done with the VariableCalculation table, which links to the Variable and the Module. The link to the Module is necessary due to the fact that a Variable can be used in several Modules, being calculated in some cases and not calculated in other cases.</p>"},{"location":"operators/01-introduction/","title":"1 Introduction","text":"<p>This documentation provides the individual description of the semantics for all the operators in the DPM Operations (DPM-XL and DPM-ML).</p> <p>The document is structured from more generic to more concrete. It starts with general behaviours that apply to several operators of different types. Then it follows with the common behaviour of the operators of the same type, finalizing with the specific behaviour of the single operators.</p>"},{"location":"operators/02-general-behaviour/","title":"2 Common general behaviours for the operators","text":""},{"location":"operators/02-general-behaviour/#21-unary-operators","title":"2.1 Unary operators","text":"<p>This general behaviour is applied to operators taking as an argument one single operand.</p> <p>Unless explicitly specified differently, the behaviour for the unary operators is as follows:</p>"},{"location":"operators/02-general-behaviour/#211-scalars","title":"2.1.1 Scalars","text":"<p>The Operator is applied on a scalar value and returns a scalar value.</p>"},{"location":"operators/02-general-behaviour/#212-recordsets","title":"2.1.2 Recordsets","text":"<p>The Operator is applied on a Recordset and returns a Recordset.</p> <p>The Operator is applied to the values of all the facts of the Recordset.</p>"},{"location":"operators/02-general-behaviour/#2121-constraints","title":"2.1.2.1 Constraints","text":"<ol> <li>The application of the Operator is only allowed if all the facts of the Operand Recordset are compatible with the operator.</li> </ol>"},{"location":"operators/02-general-behaviour/#2122-structure","title":"2.1.2.2 Structure","text":"<p>The structure of the resulting Recordset contains the key and fact components of the Operand Recordset, the attribute components are not propagated.</p>"},{"location":"operators/02-general-behaviour/#2123-records","title":"2.1.2.3 Records","text":"<p>The operators produce one output Record per each input Record, which have: - For Key Components, the values unchanged. - For the Fact values, the operator is applied to the input value and returns the corresponding value.</p>"},{"location":"operators/02-general-behaviour/#22-binary-operators","title":"2.2 Binary operators","text":"<p>This general behaviour is applied whenever an operator takes as input two operands, which includes the following operators: - Arithmetic Binary operators - Comparison operators - Logical Binary operators</p> <p>Unless explicitly specified differently, the behaviour for the binary Operators is as follows.</p>"},{"location":"operators/02-general-behaviour/#221-scalars","title":"2.2.1 Scalars","text":"<p>If the two Operands of a binary Operator are Scalars, the result shall be the Scalar resulting of applying the Operator to the Operands.</p>"},{"location":"operators/02-general-behaviour/#222-recordset-and-scalar","title":"2.2.2 Recordset and scalar","text":"<p>A binary Operator applied to a Recordset Operand and a Scalar, will result in a Recordset with the same key and fact components as the input Recordset Operand (attribute components are not propagated). The operator shall be applied to every record of the input Recordset and the Scalar.</p>"},{"location":"operators/02-general-behaviour/#2221-examples","title":"2.2.2.1 Examples","text":"<p>0.25*{S.26.01, r0600, cNNN}</p> <p>Supposing that the selection yields the following Recordset:</p> c f 0060 100 0080 200 <p>The operation results in:</p> c f 0060 25 0080 50"},{"location":"operators/02-general-behaviour/#223-recordsets","title":"2.2.3 Recordsets","text":""},{"location":"operators/02-general-behaviour/#2231-constraints","title":"2.2.3.1 Constraints","text":"<p>Binary Operators can only be applied to two Recordsets Operands if they have:</p> <ol> <li>exactly the same Key Components; or the Key Components of one Recordset (Reference Recordset) are a superset of the Key Components of the other Recordset.</li> </ol>"},{"location":"operators/02-general-behaviour/#2232-structure","title":"2.2.3.2 Structure","text":"<p>The operator yields a Recordset with the common Key Components in case 1, or the Key Components of the Reference Recordset in case 2. The resulting Recordset does not contain any Attribute Component from the Operand Recordsets.</p>"},{"location":"operators/02-general-behaviour/#2233-records","title":"2.2.3.3 Records","text":"<p>The operator applies to the pairs of values resulting from performing an inner join of the input Recordsets on the common Key Components.</p>"},{"location":"operators/02-general-behaviour/#2234-examples","title":"2.2.3.4 Examples","text":""},{"location":"operators/02-general-behaviour/#22341-same-identifiers","title":"2.2.3.4.1 Same identifiers","text":"<p>{C 28.00 c040} + {C 28.00 c190}</p> <p>Supposing that the selections yield:</p> <p>{C 28.00 c040}</p> INC f 123 1000 456 2000 789 3000 <p>{C 28.00 c190}</p> INC f 123 -100 456 -200 789 -300 <p>The result would be:</p> INC f 123 900 456 1800 789 2700"},{"location":"operators/02-general-behaviour/#22342-subset-of-identifiers","title":"2.2.3.4.2 Subset of identifiers","text":"<p>{F 40.01 c0110} &gt;= {F 40.02c0060}</p> <p>Supposing that the selections yield:</p> <p>{F 40.01 c0110}</p> LIN TYC f 123 x1 1 456 x1 0.8 789 x1 0.4 <p>{F 40.02 c0060}</p> LIN TYC STC LHC LHO f 123 x1 111 ABC x1 0.3 123 x1 111 DEF x1 0.7 456 x1 222 ABC x1 0.85 <p>The result would be:</p> LIN TYC STC LHC LHO f 123 x1 111 ABC x1 true 123 x1 111 DEF x1 true 456 x1 222 ABC x1 false <p>Note that: - An inner join on the common Key Components is performed. This means that there is no comparison for the record in F 40.01 with LIN = 789, because there is no match in F 40.02. - The result of the operation has the Structure of the Reference Recordset, which is the one that has a superset of Key Components. - For each match in the join the operator &gt;= is applied to the pairs of values for the facts.</p>"},{"location":"operators/02-general-behaviour/#224-intervals-treatment","title":"2.2.4 Intervals treatment","text":"<p>When one of two numeric operands is an interval, and the other is a point, the point is transformed into an interval with centre value equal to the point value, and radius 0.</p>"},{"location":"operators/03-selection-operators/","title":"3 Selection operators","text":""},{"location":"operators/03-selection-operators/#31-selection-operator","title":"3.1 Selection operator","text":""},{"location":"operators/03-selection-operators/#311-syntax","title":"3.1.1 Syntax","text":"<pre><code>{[ttable | vvariable | ooperation]1\n[rrow [, rrow]* | rrow_init\u2013rrow_end | r*]*\n[ccol [, ccol]*| ccol_init\u2013ccol_end | c* ]*\n[ssheet [, ssheet]*| ssheet_init\u2013ssheet_end | s*]*\ninterval_arithmetics, fallback_value\n}\n</code></pre>"},{"location":"operators/03-selection-operators/#312-input-parameters","title":"3.1.2 Input parameters","text":"<ul> <li>table: The code of a DPM Report table.</li> <li>variable: the code of a DPM variable.</li> <li>operation: The code of a DPM Operation.</li> <li>row, row_init, row_end: A Reference to the code of a row of a DPM table.</li> <li>col, col_init, col_end: A Reference to the code of a col of a DPM table.</li> <li>sheet, sheet_init, sheet_end: A Reference to the code of a sheet of a DPM table.</li> <li>interval_arithmetics: A Boolean value specifying whether interval arithmetics should apply. The default value, in case the parameter is omitted, is false.</li> <li>default_value: A scalar value specifying the value to be used in case of nulls.</li> </ul>"},{"location":"operators/03-selection-operators/#313-output","title":"3.1.3 Output","text":"<p>rset&lt;*&gt;</p>"},{"location":"operators/03-selection-operators/#314-semantics","title":"3.1.4 Semantics","text":"<p>Serves to select data as defined in the DPM model.</p>"},{"location":"operators/03-selection-operators/#315-additional-constraints","title":"3.1.5 Additional constraints","text":"<ol> <li>Existence of the parameters. The referred table, variable or operation need to be defined in the DPM.</li> <li>Operations need to be defined in the same script.</li> <li>Rows, columns and sheets need to exist in the table or operation on which they are defined.</li> <li>When the selection is done at variable level, row, column and sheet parameters cannot exist.</li> </ol>"},{"location":"operators/03-selection-operators/#316-behaviour","title":"3.1.6 Behaviour","text":"<p>Returns a Recordset with the following structure:</p> <p>Key Components: - DPM-XL   - Row: If the selected table has ordinate rows and more than one row is present in the selection. The name of the Component is \"r\".   - Column: If the selected table has ordinate columns and more than one column is present in the selection. The name of the Component is \"c\".   - Sheet: If the selected table has ordinate sheets and more than one sheet is present in the selection. The name of the Component is \"s\". - DPM-ML   - X: If there is Column for DPM-XL.   - Y: If there is Row for DPM-XL.   - Z: If there is Sheet for DPM-XL. - A DPM Key Component for each Key Variable belonging to the Key associated to the selected Variable. The name of the Component is the Code of the Property associated to the Key Variable. The Data Type of the component shall be the correspondent Data Type of the Metric or Property associated to the respective Key Variable.</p> <p>Fact Component: With the Data Type corresponding to the selected Variable.</p> <p>Attribute Components: One Component for each Attribute Variable associated to the selected Variable. The name of the Component is the Code of the Property associated to the Attribute Variable. The Data Type of the component shall be the correspondent Data Type of the Metric or Property associated to the respective Attribute Variable.</p> <p>The Records for the Recordset shall be obtained from the input data according to the selection.</p>"},{"location":"operators/03-selection-operators/#317-dpm-ml-metamodel-representation","title":"3.1.7 DPM-ML metamodel representation","text":"<p>There is no metamodel representation for the selection operator. It is used to select, in last instance, variables. So the result of the selection are processed to get the relevant variables for DPM-ML, as well as the DefaultValue and UseIntervalArithmetics attributes.</p>"},{"location":"operators/03-selection-operators/#32-with","title":"3.2 With","text":""},{"location":"operators/03-selection-operators/#321-syntax","title":"3.2.1 Syntax","text":"<pre><code>with partial_selection: expression\n</code></pre>"},{"location":"operators/03-selection-operators/#322-input-parameters","title":"3.2.2 Input parameters","text":"<ul> <li>partial_selection: A selection expression (see Selection Operator)</li> <li>expression: A expression including selection operators</li> </ul>"},{"location":"operators/03-selection-operators/#323-output","title":"3.2.3 Output","text":"<p>Does not generate output; modifies the selections of the expression after the colon.</p>"},{"location":"operators/03-selection-operators/#324-semantics","title":"3.2.4 Semantics","text":"<p>Serves to simplify expressions by adding a single context that may apply to all the operands in the expression.</p>"},{"location":"operators/03-selection-operators/#325-additional-constraints","title":"3.2.5 Additional constraints","text":"<p>None</p>"},{"location":"operators/03-selection-operators/#326-behaviour","title":"3.2.6 Behaviour","text":"<p>The selection parameters in the partial selection applies to all the selections in the expression, unless they are overridden by a more specific parameter.</p> <p>Therefore, in a selection inside the expression, whenever one of the parameters of the selection expression is not present, but that parameter is present on the partial selection, the parameter of the partial selection applies.</p>"},{"location":"operators/03-selection-operators/#327-examples","title":"3.2.7 Examples","text":"<pre><code>With {F 01.01 c0010, default:0, interval:false}:\n{r0010} = {r0020} + {r0030} + {r0040}\n</code></pre> <p>The partial selection applies to all the selections in the expression</p> <pre><code>With {F 01.01 c0010, default:0, interval:false}:\n{r0010} + {r0040} = {F04.01 r0010, c0010}\n</code></pre> <p>The partial selection applies to the two selections that do not refer to a table. Regarding the other selection, the default and intervals apply</p> <pre><code>With {F 01.01 c0010, default:0, interval:false}:\n{F 01.01 r0010} + {F 01.01 r0040} = {F04.01 r0010, c0010 default:null}\n</code></pre> <p>The partial selection applies to the two selections that refer to the same table referred to in the partial selection. Regarding the other selection, interval argument in the partial selection applies, but the default is overridden.</p> <pre><code>With {c0010, default:0, interval:false}:\n{F 01.01 r0010} + {F 01.01 r0040} = {F04.01 r0010}\n</code></pre> <p>The partial selection applies to all the selections in the expression.</p>"},{"location":"operators/03-selection-operators/#328-metamodel-representation","title":"3.2.8 Metamodel representation","text":"<p>See selection operator.</p>"},{"location":"operators/04-numeric-operators/","title":"4 Numeric","text":"<p>Numeric operators describe operations involving operands with data type Number, Integer or Number Interval.</p>"},{"location":"operators/04-numeric-operators/#41-numeric-operators-general-behaviour","title":"4.1 Numeric operators' general behaviour","text":""},{"location":"operators/04-numeric-operators/#411-input-parameters","title":"4.1.1 Input parameters","text":"<p>Operands can be of Recordset or Scalar type. Must be defined as Number interval, Number, or Integer.</p>"},{"location":"operators/04-numeric-operators/#412-result-type","title":"4.1.2 Result type","text":"<p>Recordset or Scalar with type Number interval, Number, or Integer.</p>"},{"location":"operators/04-numeric-operators/#413-behaviour","title":"4.1.3 Behaviour","text":"<p>If any operand is null, then the result is also null.</p> <p>Numeric operators can be applied to any numeric type (Number interval, Number, or Integer) and combination of them, in which case casting to the highest type shall apply.</p> <p>If the type of operands is Integer then the result has type Integer. If any of the operands is of type Number, and there are no Number intervals, then the result has type Number. If any operand is of Number Interval type, the result has type Number Interval.</p>"},{"location":"operators/04-numeric-operators/#42-unary-arithmetic-operators","title":"4.2 Unary arithmetic operators","text":""},{"location":"operators/04-numeric-operators/#421-plus","title":"4.2.1 Plus (+)","text":""},{"location":"operators/04-numeric-operators/#4211-syntax","title":"4.2.1.1 Syntax","text":"<pre><code>+ op\n</code></pre>"},{"location":"operators/04-numeric-operators/#4212-input-parameters","title":"4.2.1.2 Input parameters","text":"<p>Op: rset | scal"},{"location":"operators/04-numeric-operators/#4213-output","title":"4.2.1.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4214-semantics","title":"4.2.1.4 Semantics","text":"<p>Returns the operand unchanged.</p>"},{"location":"operators/04-numeric-operators/#4215-additional-constraints","title":"4.2.1.5 Additional constraints","text":"<p>None</p>"},{"location":"operators/04-numeric-operators/#4216-behaviour","title":"4.2.1.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4217-examples","title":"4.2.1.7 Examples","text":"<ul> <li> <ul> <li>1 results in 1</li> </ul> </li> <li> <ul> <li>(-3) results in -3</li> </ul> </li> </ul>"},{"location":"operators/04-numeric-operators/#422-minus-","title":"4.2.2 Minus (-)","text":""},{"location":"operators/04-numeric-operators/#4221-syntax","title":"4.2.2.1 Syntax","text":"<pre><code>- op\n</code></pre>"},{"location":"operators/04-numeric-operators/#4222-input-parameters","title":"4.2.2.2 Input parameters","text":"<p>Op: rset | scal"},{"location":"operators/04-numeric-operators/#4223-output","title":"4.2.2.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4224-semantics","title":"4.2.2.4 Semantics","text":"<p>Inverts the sign of the operand.</p> <p>For intervals, inverts the sign of the centre, leaving the radius unchanged.</p>"},{"location":"operators/04-numeric-operators/#4225-additional-constraints","title":"4.2.2.5 Additional constraints","text":"<p>None</p>"},{"location":"operators/04-numeric-operators/#4226-behaviour","title":"4.2.2.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4227-examples","title":"4.2.2.7 Examples","text":"<ul> <li> <ul> <li>1 results in -1</li> </ul> </li> <li> <ul> <li>(-3) results in 3</li> </ul> </li> </ul>"},{"location":"operators/04-numeric-operators/#423-absolute-value-abs","title":"4.2.3 Absolute value (abs)","text":""},{"location":"operators/04-numeric-operators/#4231-syntax","title":"4.2.3.1 Syntax","text":"<pre><code>abs(op)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4232-input-parameters","title":"4.2.3.2 Input parameters","text":"<p>Op: rset | scal"},{"location":"operators/04-numeric-operators/#4233-output","title":"4.2.3.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4234-semantics","title":"4.2.3.4 Semantics","text":"<p>Calculates the absolute value of a number.</p> <p>For intervals, return the absolute value of the centre, leaving the radius unchanged</p>"},{"location":"operators/04-numeric-operators/#4235-additional-constraints","title":"4.2.3.5 Additional constraints","text":"<p>None</p>"},{"location":"operators/04-numeric-operators/#4236-behaviour","title":"4.2.3.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4237-examples","title":"4.2.3.7 Examples","text":"<ul> <li>Abs(-1) results in 1</li> <li>Abs(3) results in 3</li> </ul>"},{"location":"operators/04-numeric-operators/#424-exponential-exp","title":"4.2.4 Exponential (exp)","text":""},{"location":"operators/04-numeric-operators/#4241-syntax","title":"4.2.4.1 Syntax","text":"<pre><code>exp(op)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4242-input-parameters","title":"4.2.4.2 Input parameters","text":"<p>Op: rset | scal"},{"location":"operators/04-numeric-operators/#4243-output","title":"4.2.4.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4244-semantics","title":"4.2.4.4 Semantics","text":"<p>Returns e (base of the natural logarithm) raised to the op power.</p>"},{"location":"operators/04-numeric-operators/#4245-additional-constraints","title":"4.2.4.5 Additional constraints","text":"<p>None</p>"},{"location":"operators/04-numeric-operators/#4246-behaviour","title":"4.2.4.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4247-examples","title":"4.2.4.7 Examples","text":"<ul> <li>exp(2) results in 7.38905</li> <li>exp(1) results in 2.71828 (the e number)</li> </ul>"},{"location":"operators/04-numeric-operators/#425-natural-logarithm-ln","title":"4.2.5 Natural logarithm (ln)","text":""},{"location":"operators/04-numeric-operators/#4251-syntax","title":"4.2.5.1 Syntax","text":"<pre><code>ln(op)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4252-input-parameters","title":"4.2.5.2 Input parameters","text":"<p>Op: rset | scal"},{"location":"operators/04-numeric-operators/#4253-output","title":"4.2.5.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4254-semantics","title":"4.2.5.4 Semantics","text":"<p>Calculates the natural logarithm of a number.</p>"},{"location":"operators/04-numeric-operators/#4255-additional-constraints","title":"4.2.5.5 Additional constraints","text":"<p>The numeric values must be greater than 0.</p>"},{"location":"operators/04-numeric-operators/#4256-behaviour","title":"4.2.5.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> <li>If any value is smaller than or equal to 0, generates a run-time error.</li> </ul>"},{"location":"operators/04-numeric-operators/#4257-examples","title":"4.2.5.7 Examples","text":"<ul> <li>ln(1) results in 0</li> <li>ln(148) results in 4.997</li> </ul>"},{"location":"operators/04-numeric-operators/#426-square-root-sqrt","title":"4.2.6 Square root (sqrt)","text":""},{"location":"operators/04-numeric-operators/#4261-syntax","title":"4.2.6.1 Syntax","text":"<pre><code>sqrt(op)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4262-input-parameters","title":"4.2.6.2 Input parameters","text":"<p>Op: rset | scal"},{"location":"operators/04-numeric-operators/#4263-output","title":"4.2.6.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4264-semantics","title":"4.2.6.4 Semantics","text":"<p>Calculates the square root of a number.</p>"},{"location":"operators/04-numeric-operators/#4265-additional-constraints","title":"4.2.6.5 Additional constraints","text":"<p>The numeric values must be greater than or equal to 0.</p>"},{"location":"operators/04-numeric-operators/#4266-behaviour","title":"4.2.6.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> <li>If any value is smaller than 0, generates a run-time error.</li> </ul>"},{"location":"operators/04-numeric-operators/#4267-examples","title":"4.2.6.7 Examples","text":"<ul> <li>sqrt(4) results in 2</li> <li>sqrt(25) results in 5</li> </ul>"},{"location":"operators/04-numeric-operators/#427-logarithm-log","title":"4.2.7 Logarithm (log)","text":""},{"location":"operators/04-numeric-operators/#4271-syntax","title":"4.2.7.1 Syntax","text":"<pre><code>log(op, base)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4272-input-parameters","title":"4.2.7.2 Input parameters","text":"<ul> <li>op: rset | scal  <li>base: scal"},{"location":"operators/04-numeric-operators/#4273-output","title":"4.2.7.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4274-semantics","title":"4.2.7.4 Semantics","text":"<p>Calculates the logarithm of base op.</p>"},{"location":"operators/04-numeric-operators/#4275-additional-constraints","title":"4.2.7.5 Additional constraints","text":"<p>op numeric values must be greater than 1. base numeric values must be greater than 0.</p>"},{"location":"operators/04-numeric-operators/#4276-behaviour","title":"4.2.7.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> <li>If the base is 1 or smaller, generates a run-time error.</li> <li>If the number is 0 or smaller, generates a run-time error.</li> </ul>"},{"location":"operators/04-numeric-operators/#4277-examples","title":"4.2.7.7 Examples","text":"<ul> <li>Log(512, 2) results in 9</li> <li>Log(100, 10) results in 2</li> </ul>"},{"location":"operators/04-numeric-operators/#43-binary-arithmetic-operators","title":"4.3 Binary arithmetic operators","text":"<p>This operators group follows the General behavior for binary operators.</p>"},{"location":"operators/04-numeric-operators/#431-addition","title":"4.3.1 Addition (+)","text":""},{"location":"operators/04-numeric-operators/#4311-syntax","title":"4.3.1.1 Syntax","text":"<pre><code>left + right\n</code></pre>"},{"location":"operators/04-numeric-operators/#4312-input-parameters","title":"4.3.1.2 Input parameters","text":"<ul> <li>left: rset | scal  <li>right: rset | scal"},{"location":"operators/04-numeric-operators/#4313-output","title":"4.3.1.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4314-semantics","title":"4.3.1.4 Semantics","text":"<p>Returns the sum of two numbers.</p> <p>For intervals: - Centre is calculated as centre(left) + centre(right) - Radius is calculated radius(left) + radius(right)</p>"},{"location":"operators/04-numeric-operators/#4315-additional-constraints","title":"4.3.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/04-numeric-operators/#4316-behaviour","title":"4.3.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4317-examples","title":"4.3.1.7 Examples","text":"<ul> <li>3 + 2 results in 5</li> <li>-7 + 3 results in -4</li> </ul>"},{"location":"operators/04-numeric-operators/#432-subtraction-","title":"4.3.2 Subtraction (-)","text":""},{"location":"operators/04-numeric-operators/#4321-syntax","title":"4.3.2.1 Syntax","text":"<pre><code>left - right\n</code></pre>"},{"location":"operators/04-numeric-operators/#4322-input-parameters","title":"4.3.2.2 Input parameters","text":"<ul> <li>left: rset | scal  <li>right: rset | scal"},{"location":"operators/04-numeric-operators/#4323-output","title":"4.3.2.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4324-semantics","title":"4.3.2.4 Semantics","text":"<p>Returns the difference of two numbers.</p> <p>For intervals: - Centre is calculated as centre(left) - centre(right) - Radius is calculated radius(left) + radius(right)</p>"},{"location":"operators/04-numeric-operators/#4325-additional-constraints","title":"4.3.2.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/04-numeric-operators/#4326-behaviour","title":"4.3.2.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4327-examples","title":"4.3.2.7 Examples","text":"<ul> <li>3 - 2 results in 1</li> <li>-7 - 3 results in -10</li> </ul>"},{"location":"operators/04-numeric-operators/#433-multiplication","title":"4.3.3 Multiplication (*)","text":""},{"location":"operators/04-numeric-operators/#4331-syntax","title":"4.3.3.1 Syntax","text":"<pre><code>left * right\n</code></pre>"},{"location":"operators/04-numeric-operators/#4332-input-parameters","title":"4.3.3.2 Input parameters","text":"<ul> <li>left: rset | scal  <li>right: rset | scal"},{"location":"operators/04-numeric-operators/#4333-output","title":"4.3.3.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4334-semantics","title":"4.3.3.4 Semantics","text":"<p>Returns the product of two numbers.</p> <p>For intervals: - Centre is calculated as centre(left) * centre(right) - Radius is calculated as(centre(left) * radius(right)) + abs(radius(left) * centre(right)) + (radius(left) * radius(right))</p>"},{"location":"operators/04-numeric-operators/#4335-additional-constraints","title":"4.3.3.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/04-numeric-operators/#4336-behaviour","title":"4.3.3.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4337-examples","title":"4.3.3.7 Examples","text":"<ul> <li>4 * 6 results in 24</li> <li>-9 * 2 results in -18</li> </ul>"},{"location":"operators/04-numeric-operators/#434-division","title":"4.3.4 Division (/)","text":""},{"location":"operators/04-numeric-operators/#4341-syntax","title":"4.3.4.1 Syntax","text":"<pre><code>num / den\n</code></pre>"},{"location":"operators/04-numeric-operators/#4342-input-parameters","title":"4.3.4.2 Input parameters","text":"<ul> <li>num: rset | scal  <li>den: rset | scal"},{"location":"operators/04-numeric-operators/#4343-output","title":"4.3.4.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4344-semantics","title":"4.3.4.4 Semantics","text":"<p>Divides two numbers.</p> <p>For intervals: - Centre is calculated as centre(left) / centre(right) - Radius is calculated as max((centre(left) + radius(left)) / (centre(right) + radius(right)), (centre(left) + radius(left)) / (centre(right) - radius(right)), (centre(left) - radius(left)) / (centre(right) + radius(right)), (centre(left) - radius(left)) / (centre(right) - radius(right)))</p>"},{"location":"operators/04-numeric-operators/#4345-additional-constraints","title":"4.3.4.5 Additional constraints","text":"<p>The denominator must be different to zero.</p>"},{"location":"operators/04-numeric-operators/#4346-behaviour","title":"4.3.4.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> <li>If the denominator is 0, generates a run-time error.</li> </ul>"},{"location":"operators/04-numeric-operators/#4347-examples","title":"4.3.4.7 Examples","text":"<ul> <li>24 / 6 results in 4</li> <li>-18 / 2 results in -9</li> </ul>"},{"location":"operators/04-numeric-operators/#435-maximum-max","title":"4.3.5 Maximum (max)","text":""},{"location":"operators/04-numeric-operators/#4351-syntax","title":"4.3.5.1 Syntax","text":"<pre><code>max(op1, op2 {, op}*)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4352-input-parameters","title":"4.3.5.2 Input parameters","text":"<ul> <li>op1: rset | scal  <li>op2: rset | scal"},{"location":"operators/04-numeric-operators/#4353-output","title":"4.3.5.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4354-semantics","title":"4.3.5.4 Semantics","text":"<p>Calculates the maximum value from a set of operands.</p> <p>For intervals: - Centre is calculated as the maximum centre value from all the intervals. - Radius is the radius of the interval with maximum centre.</p>"},{"location":"operators/04-numeric-operators/#4355-additional-constraints","title":"4.3.5.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/04-numeric-operators/#4356-behaviour","title":"4.3.5.6 Behaviour","text":"<ul> <li>For each pair of operands, the standard behaviour for binary operators applies</li> </ul>"},{"location":"operators/04-numeric-operators/#4357-examples","title":"4.3.5.7 Examples","text":"<ul> <li>Max(1, 3, -5) results in 3</li> <li>Max(1, 3, null) results in null</li> </ul>"},{"location":"operators/04-numeric-operators/#436-minimum-min","title":"4.3.6 Minimum (min)","text":""},{"location":"operators/04-numeric-operators/#4361-syntax","title":"4.3.6.1 Syntax","text":"<pre><code>min(op1, op2 {, op}*)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4362-input-parameters","title":"4.3.6.2 Input parameters","text":"<ul> <li>op1: rset | scal  <li>op2: rset | scal"},{"location":"operators/04-numeric-operators/#4363-output","title":"4.3.6.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4364-semantics","title":"4.3.6.4 Semantics","text":"<p>Calculates the minimum value from a set of operands.</p> <p>For intervals: - Centre is calculated as the minimum centre value from all the intervals. - Radius is the radius of the interval with minimum centre.</p>"},{"location":"operators/04-numeric-operators/#4365-additional-constraints","title":"4.3.6.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/04-numeric-operators/#4366-behaviour","title":"4.3.6.6 Behaviour","text":"<ul> <li>For each pair of operands, the standard behaviour for binary operators applies</li> </ul>"},{"location":"operators/04-numeric-operators/#4367-examples","title":"4.3.6.7 Examples","text":"<ul> <li>Min(1, 3, -5) results in -5</li> <li>Min(1, 3, null) results in null</li> </ul>"},{"location":"operators/04-numeric-operators/#437-power","title":"4.3.7 Power","text":""},{"location":"operators/04-numeric-operators/#4371-syntax","title":"4.3.7.1 Syntax","text":"<pre><code>power(base, exponent)\n</code></pre>"},{"location":"operators/04-numeric-operators/#4372-input-parameters","title":"4.3.7.2 Input parameters","text":"<ul> <li>num: rset | scal  <li>den: rset | scal"},{"location":"operators/04-numeric-operators/#4373-output","title":"4.3.7.3 Output","text":"<p>rset | scal"},{"location":"operators/04-numeric-operators/#4374-semantics","title":"4.3.7.4 Semantics","text":"<p>Raises the power to the exponent.</p>"},{"location":"operators/04-numeric-operators/#4375-additional-constraints","title":"4.3.7.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/04-numeric-operators/#4376-behaviour","title":"4.3.7.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Numeric operators' standard behaviour.</li> </ul>"},{"location":"operators/04-numeric-operators/#4377-examples","title":"4.3.7.7 Examples","text":"<ul> <li>power(5,2) results in 25</li> <li>power(5,-1) results in 0.2</li> <li>power(-5, 3) results in -125</li> </ul>"},{"location":"operators/05-comparison-operators/","title":"5 Comparison operators","text":""},{"location":"operators/05-comparison-operators/#51-comparison-operators-general-behaviour","title":"5.1 Comparison operators' general behaviour","text":"<p>Comparison operators describe operations that compare the values of operands.</p> <p>This operator group is based upon the General behavior for binary operators.</p>"},{"location":"operators/05-comparison-operators/#511-input-parameters","title":"5.1.1 Input parameters","text":"<p>Operands that can be of Recordset or Scalar type. Must have the same data type. For all operators that accept numeric operands, intervals are allowed.</p>"},{"location":"operators/05-comparison-operators/#512-result-type","title":"5.1.2 Result type","text":"<p>Recordset or Scalar with type Boolean.</p>"},{"location":"operators/05-comparison-operators/#513-constraints","title":"5.1.3 Constraints","text":"<p>The operands for the comparison operations must be of the same type (considering implicit casting).</p>"},{"location":"operators/05-comparison-operators/#514-behaviour","title":"5.1.4 Behaviour","text":"<p>If any operand is null, then the result is also null.</p> <p>For comparison operators implying an order (&gt;, &gt;=, &lt;, &lt;=), the following rules apply: - Boolean values: True is considered greater than false. - Strings: Alphabetic order is followed.</p>"},{"location":"operators/05-comparison-operators/#52-equal","title":"5.2 Equal (=)","text":""},{"location":"operators/05-comparison-operators/#5211-syntax","title":"5.2.1.1 Syntax","text":"<pre><code>left = right\n</code></pre>"},{"location":"operators/05-comparison-operators/#5212-input-parameters","title":"5.2.1.2 Input parameters","text":"<ul> <li>left: rset | scal &lt;*&gt;</li> <li>right: rset | scal &lt;*&gt;</li> </ul>"},{"location":"operators/05-comparison-operators/#5213-output","title":"5.2.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5214-semantics","title":"5.2.1.4 Semantics","text":"<p>Returns true if left is equal to right and false otherwise.</p> <p>For intervals: abs(centre(left) \u2013 centre(right)) &lt;= radius(left) + radius(right).</p>"},{"location":"operators/05-comparison-operators/#5215-additional-constraints","title":"5.2.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/05-comparison-operators/#5216-behaviour","title":"5.2.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5217-examples","title":"5.2.1.7 Examples","text":"<ul> <li>1 = 2 results in False</li> <li>3 = NULL results in NULL</li> <li>\"4\" = \"4\" results in True</li> </ul>"},{"location":"operators/05-comparison-operators/#53-not-equal","title":"5.3 Not Equal (&lt;&gt;)","text":""},{"location":"operators/05-comparison-operators/#5311-syntax","title":"5.3.1.1 Syntax","text":"<pre><code>left &lt;&gt; right\n</code></pre>"},{"location":"operators/05-comparison-operators/#5312-input-parameters","title":"5.3.1.2 Input parameters","text":"<ul> <li>left: rset | scal &lt;*&gt;</li> <li>right: rset | scal &lt;*&gt;</li> </ul>"},{"location":"operators/05-comparison-operators/#5313-output","title":"5.3.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5314-semantics","title":"5.3.1.4 Semantics","text":"<p>Returns false if left is equal to right and true otherwise.</p> <p>For intervals: abs(centre(left) \u2013 centre(right)) &gt; radius(left) + radius(right).</p>"},{"location":"operators/05-comparison-operators/#5315-additional-constraints","title":"5.3.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/05-comparison-operators/#5316-behaviour","title":"5.3.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5317-examples","title":"5.3.1.7 Examples","text":"<ul> <li>1 &lt;&gt; 2 results in True</li> <li>3 &lt;&gt; NULL results in NULL</li> <li>\"4\" &lt;&gt; \"4\" results in False</li> </ul>"},{"location":"operators/05-comparison-operators/#54-greater-than","title":"5.4 Greater than (&gt;)","text":""},{"location":"operators/05-comparison-operators/#5411-syntax","title":"5.4.1.1 Syntax","text":"<pre><code>left &gt; right\n</code></pre>"},{"location":"operators/05-comparison-operators/#5412-input-parameters","title":"5.4.1.2 Input parameters","text":"<ul> <li>left: rset | scal &lt;*&gt;</li> <li>right: rset | scal &lt;*&gt;</li> </ul>"},{"location":"operators/05-comparison-operators/#5413-output","title":"5.4.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5414-semantics","title":"5.4.1.4 Semantics","text":"<p>Returns true if left is greater than right and false otherwise.</p> <p>For intervals: centre(left) &gt; centre(right) - (radius(left) + radius(right)).</p>"},{"location":"operators/05-comparison-operators/#5415-additional-constraints","title":"5.4.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/05-comparison-operators/#5416-behaviour","title":"5.4.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5417-examples","title":"5.4.1.7 Examples","text":"<ul> <li>12 &gt; 2 results in True</li> <li>3 &gt; NULL results in NULL</li> <li>True &gt; False results in True</li> <li>\"tez\" &gt; \"test\" results in True</li> </ul>"},{"location":"operators/05-comparison-operators/#55-greater-equal-than","title":"5.5 Greater Equal than (&gt;=)","text":""},{"location":"operators/05-comparison-operators/#5511-syntax","title":"5.5.1.1 Syntax","text":"<pre><code>left &gt;= right\n</code></pre>"},{"location":"operators/05-comparison-operators/#5512-input-parameters","title":"5.5.1.2 Input parameters","text":"<ul> <li>left: rset | scal &lt;*&gt;</li> <li>right: rset | scal &lt;*&gt;</li> </ul>"},{"location":"operators/05-comparison-operators/#5513-output","title":"5.5.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5514-semantics","title":"5.5.1.4 Semantics","text":"<p>Returns true if left is greater than or equal to right and false otherwise.</p> <p>For intervals: centre(left) &gt;= centre(right) - (radius(left) + radius(right)).</p>"},{"location":"operators/05-comparison-operators/#5515-additional-constraints","title":"5.5.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/05-comparison-operators/#5516-behaviour","title":"5.5.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5517-examples","title":"5.5.1.7 Examples","text":"<ul> <li>1 &gt;= 2 results in False</li> <li>3 &gt;= NULL results in NULL</li> <li>\"tez\" &gt;= \"test\" results in True</li> </ul>"},{"location":"operators/05-comparison-operators/#56-less-than","title":"5.6 Less than (&lt;)","text":""},{"location":"operators/05-comparison-operators/#5611-syntax","title":"5.6.1.1 Syntax","text":"<pre><code>left &lt; right\n</code></pre>"},{"location":"operators/05-comparison-operators/#5612-input-parameters","title":"5.6.1.2 Input parameters","text":"<ul> <li>left: rset | scal &lt;*&gt;</li> <li>right: rset | scal &lt;*&gt;</li> </ul>"},{"location":"operators/05-comparison-operators/#5613-output","title":"5.6.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5614-semantics","title":"5.6.1.4 Semantics","text":"<p>Returns true if left is smaller than right and false otherwise.</p> <p>For intervals: centre(left) \u2013 centre(right) &lt; radius(left) + radius(right).</p>"},{"location":"operators/05-comparison-operators/#5615-additional-constraints","title":"5.6.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/05-comparison-operators/#5616-behaviour","title":"5.6.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5617-examples","title":"5.6.1.7 Examples","text":"<ul> <li>1 &lt; 2 results in True</li> <li>3 &lt; NULL results in NULL</li> <li>\"tea\" &lt; \"test\" results in True</li> </ul>"},{"location":"operators/05-comparison-operators/#57-less-equal-than","title":"5.7 Less Equal than (&lt;=)","text":""},{"location":"operators/05-comparison-operators/#5711-syntax","title":"5.7.1.1 Syntax","text":"<pre><code>left &lt;= right\n</code></pre>"},{"location":"operators/05-comparison-operators/#5712-input-parameters","title":"5.7.1.2 Input parameters","text":"<ul> <li>left: rset | scal &lt;*&gt;</li> <li>right: rset | scal &lt;*&gt;</li> </ul>"},{"location":"operators/05-comparison-operators/#5713-output","title":"5.7.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5714-semantics","title":"5.7.1.4 Semantics","text":"<p>Returns true if left is smaller than or equal to right and false otherwise.</p> <p>For intervals: centre(left) \u2013 centre(right) &lt;= radius(left) + radius(right).</p>"},{"location":"operators/05-comparison-operators/#5715-additional-constraints","title":"5.7.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/05-comparison-operators/#5716-behaviour","title":"5.7.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5717-examples","title":"5.7.1.7 Examples","text":"<ul> <li>3 &lt;= 2 results in False</li> <li>3 &lt;= NULL results in NULL</li> <li>\"tea\" &lt;= \"test\" results in True</li> </ul>"},{"location":"operators/05-comparison-operators/#58-element-of-in","title":"5.8 Element of (in)","text":""},{"location":"operators/05-comparison-operators/#5811-syntax","title":"5.8.1.1 Syntax","text":"<pre><code>op in set\n</code></pre>"},{"location":"operators/05-comparison-operators/#5812-input-parameters","title":"5.8.1.2 Input parameters","text":"<ul> <li>op: rset | scal  <li>set: scalar_set &lt;*&gt; | subcategory</li>"},{"location":"operators/05-comparison-operators/#5813-output","title":"5.8.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5814-semantics","title":"5.8.1.4 Semantics","text":"<p>Returns true if op belongs to the set and false otherwise.</p>"},{"location":"operators/05-comparison-operators/#5815-additional-constraints","title":"5.8.1.5 Additional constraints","text":"<p>op must be of the same data type as the values in the set (considering implicit casting)</p>"},{"location":"operators/05-comparison-operators/#5816-behaviour","title":"5.8.1.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5817-examples","title":"5.8.1.7 Examples","text":"<ul> <li>5 in {1,3, 5} results in True</li> <li>\"abc\" in {\"def\", \"ghi\"} results in False</li> </ul>"},{"location":"operators/05-comparison-operators/#59-match-characters-match","title":"5.9 Match characters (match)","text":""},{"location":"operators/05-comparison-operators/#5911-syntax","title":"5.9.1.1 Syntax","text":"<pre><code>match(op, pattern)\n</code></pre>"},{"location":"operators/05-comparison-operators/#5912-input-parameters","title":"5.9.1.2 Input parameters","text":"<ul> <li>op: rset | scal  <li>pattern: scal"},{"location":"operators/05-comparison-operators/#5913-output","title":"5.9.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#5914-semantics","title":"5.9.1.4 Semantics","text":"<p>Returns true if op matches the pattern, false otherwise.</p>"},{"location":"operators/05-comparison-operators/#5915-additional-constraints","title":"5.9.1.5 Additional constraints","text":"<p>pattern is a regex expression following the Python definition.</p>"},{"location":"operators/05-comparison-operators/#5916-behaviour","title":"5.9.1.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/05-comparison-operators/#5917-examples","title":"5.9.1.7 Examples","text":"<ul> <li>Match(\"test\", \"[0-9]+\") results in False</li> <li>Match(\"1234\", \"[0-9]+\") results in True</li> <li>Match(\"hello\", \"[a-z]+\") results in True</li> </ul>"},{"location":"operators/05-comparison-operators/#510-is-null-isnull","title":"5.10 Is null (isnull)","text":""},{"location":"operators/05-comparison-operators/#51011-syntax","title":"5.10.1.1 Syntax","text":"<pre><code>is_null(op)\n</code></pre>"},{"location":"operators/05-comparison-operators/#51012-input-parameters","title":"5.10.1.2 Input parameters","text":"<p>op: rset | scal &lt;*&gt;</p>"},{"location":"operators/05-comparison-operators/#51013-output","title":"5.10.1.3 Output","text":"<p>rset | scal"},{"location":"operators/05-comparison-operators/#51014-semantics","title":"5.10.1.4 Semantics","text":"<p>Returns true if the value of op is null, false otherwise.</p>"},{"location":"operators/05-comparison-operators/#51015-additional-constraints","title":"5.10.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/05-comparison-operators/#51016-behaviour","title":"5.10.1.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> <li>Comparison operators' standard behaviour.</li> </ul>"},{"location":"operators/06-logical-operators/","title":"6 Logical","text":"<p>Logical operators describe operations involving two operands with Boolean data type. To deal with null values, all operations implements Kleene logic for logical operations (also known as Three-valued logic).</p>"},{"location":"operators/06-logical-operators/#61-conjunction-and","title":"6.1 Conjunction (and)","text":""},{"location":"operators/06-logical-operators/#6111-syntax","title":"6.1.1.1 Syntax","text":"<pre><code>left and right\n</code></pre>"},{"location":"operators/06-logical-operators/#6112-input-parameters","title":"6.1.1.2 Input parameters","text":"<ul> <li>left: rset | scal  <li>right: rset | scal"},{"location":"operators/06-logical-operators/#6113-output","title":"6.1.1.3 Output","text":"<p>rset | scal"},{"location":"operators/06-logical-operators/#6114-semantics","title":"6.1.1.4 Semantics","text":"<p>Returns true if both operands are true, otherwise false.</p>"},{"location":"operators/06-logical-operators/#6115-additional-constraints","title":"6.1.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/06-logical-operators/#6116-behaviour","title":"6.1.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> </ul> False Null True False False False False Null False Null Null True False Null True"},{"location":"operators/06-logical-operators/#62-disjunction-or","title":"6.2 Disjunction (or)","text":""},{"location":"operators/06-logical-operators/#6211-syntax","title":"6.2.1.1 Syntax","text":"<pre><code>left or right\n</code></pre>"},{"location":"operators/06-logical-operators/#6212-input-parameters","title":"6.2.1.2 Input parameters","text":"<ul> <li>left: rset | scal  <li>right: rset | scal"},{"location":"operators/06-logical-operators/#6213-output","title":"6.2.1.3 Output","text":"<p>rset | scal"},{"location":"operators/06-logical-operators/#6214-semantics","title":"6.2.1.4 Semantics","text":"<p>Returns true if any operand is true, otherwise false.</p>"},{"location":"operators/06-logical-operators/#6215-additional-constraints","title":"6.2.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/06-logical-operators/#6216-behaviour","title":"6.2.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> </ul> False Null True False False Null True Null Null Null True True True True True"},{"location":"operators/06-logical-operators/#63-exclusive-disjunction-xor","title":"6.3 Exclusive disjunction (xor)","text":""},{"location":"operators/06-logical-operators/#6311-syntax","title":"6.3.1.1 Syntax","text":"<pre><code>left xor right\n</code></pre>"},{"location":"operators/06-logical-operators/#6312-input-parameters","title":"6.3.1.2 Input parameters","text":"<ul> <li>left: rset | scal  <li>right: rset | scal"},{"location":"operators/06-logical-operators/#6313-output","title":"6.3.1.3 Output","text":"<p>rset | scal"},{"location":"operators/06-logical-operators/#6314-semantics","title":"6.3.1.4 Semantics","text":"<p>Returns true if one operand is true and the other is false, otherwise false.</p>"},{"location":"operators/06-logical-operators/#6315-additional-constraints","title":"6.3.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/06-logical-operators/#6316-behaviour","title":"6.3.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> </ul> False Null True False False Null True Null Null Null Null True True Null False"},{"location":"operators/06-logical-operators/#64-negation-not","title":"6.4 Negation (not)","text":""},{"location":"operators/06-logical-operators/#6411-syntax","title":"6.4.1.1 Syntax","text":"<pre><code>not op\n</code></pre>"},{"location":"operators/06-logical-operators/#6412-input-parameters","title":"6.4.1.2 Input parameters","text":"<p>op: rset | scal"},{"location":"operators/06-logical-operators/#6413-output","title":"6.4.1.3 Output","text":"<p>rset | scal"},{"location":"operators/06-logical-operators/#6414-semantics","title":"6.4.1.4 Semantics","text":"<p>Returns true if op is false, and false if op is true.</p>"},{"location":"operators/06-logical-operators/#6415-additional-constraints","title":"6.4.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/06-logical-operators/#6416-behaviour","title":"6.4.1.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> </ul> Input Result False True Null Null True False"},{"location":"operators/07-aggregate-operators/","title":"7 Aggregate operators","text":""},{"location":"operators/07-aggregate-operators/#71-aggregate-operators-general-behaviour","title":"7.1 Aggregate operators' general behaviour","text":""},{"location":"operators/07-aggregate-operators/#711-syntax","title":"7.1.1 Syntax","text":"<pre><code>aggregateOperator (op {group by groupingId {, groupingId}*})\n</code></pre>"},{"location":"operators/07-aggregate-operators/#712-input-parameters","title":"7.1.2 Input parameters","text":"<ul> <li>op: rset &lt;*&gt;</li> <li>groupingId: scal"},{"location":"operators/07-aggregate-operators/#713-output","title":"7.1.3 Output","text":"<p>rset | scal &lt;*&gt;</p>"},{"location":"operators/07-aggregate-operators/#714-semantics","title":"7.1.4 Semantics","text":"<p>Aggregate operators perform operations on the measures of the operand recordset, calculating the required aggregated values for groups of records. The groups of records to be aggregated are specified through the grouping clause. If no grouping clause is used, the operation shall be calculated on all the records, resulting in a scalar.</p>"},{"location":"operators/07-aggregate-operators/#715-additional-constraints","title":"7.1.5 Additional constraints","text":"<p>The allowed data types depend on the specific operator according to the following table:</p> Operator Operand type Result type Sum Number Number Count Any Integer Min Any Any Max Any Any Average Number Number Median Number Number <p>The components in the grouping by clause shall be present in the operand.</p>"},{"location":"operators/07-aggregate-operators/#716-behaviour","title":"7.1.6 Behaviour","text":"<p>Aggregate operations generate a recordset or a scalar, depending on the grouping clause.</p> <p>If the grouping clause exists, the structure of the resulting recordset has as key components the components in the group by</p> <p>The result may be: - A recordset, for which the resulting structure contains as key dimensions the components included in the group by clause. - A scalar, if the grouping clause is omitted.</p>"},{"location":"operators/07-aggregate-operators/#717-examples","title":"7.1.7 Examples","text":"<p>Supposing the following recordset with name rs1:</p> r c CNT f 010 010 PT 100 010 020 PT 200 020 010 PT 300 020 020 PT 400 010 010 DE 500 010 020 DE 600 020 010 DE 700 020 020 DE 800 <p>sum(rs1 group by r) results in:</p> r f 010 1400 020 2200 <p>sum(rs1 group by r, CNT) results in:</p> r CNT f 010 PT 300 020 PT 700 010 DE 1100 020 DE 1500 <p>count(rs1) results in: 8 (scalar)</p>"},{"location":"operators/07-aggregate-operators/#72-sum-sum","title":"7.2 Sum (sum)","text":""},{"location":"operators/07-aggregate-operators/#721-syntax","title":"7.2.1 Syntax","text":"<pre><code>sum(op {group by groupingId {, groupingId}*})\n</code></pre>"},{"location":"operators/07-aggregate-operators/#722-input-parameters","title":"7.2.2 Input parameters","text":"<ul> <li>op: rset  <li>groupingId: scal"},{"location":"operators/07-aggregate-operators/#723-output","title":"7.2.3 Output","text":"<p>rset | scal"},{"location":"operators/07-aggregate-operators/#724-semantics","title":"7.2.4 Semantics","text":"<p>Returns the sum of the input values. Follows the general semantics of aggregate operators.</p> <p>For intervals: - The centre is calculated as the sum of the all the centers of the operands. - The radius is calculated as the sum of all the radiuses of the operads.</p>"},{"location":"operators/07-aggregate-operators/#725-additional-constraints","title":"7.2.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/07-aggregate-operators/#726-behaviour","title":"7.2.6 Behaviour","text":"<p>Aggregate operators' general behaviour.</p>"},{"location":"operators/07-aggregate-operators/#73-count-count","title":"7.3 Count (count)","text":""},{"location":"operators/07-aggregate-operators/#731-syntax","title":"7.3.1 Syntax","text":"<pre><code>count(op {group by groupingId {, groupingId}*})\n</code></pre>"},{"location":"operators/07-aggregate-operators/#732-input-parameters","title":"7.3.2 Input parameters","text":"<ul> <li>op: rset &lt;*&gt;</li> <li>groupingId: scal"},{"location":"operators/07-aggregate-operators/#733-output","title":"7.3.3 Output","text":"<p>rset | scal"},{"location":"operators/07-aggregate-operators/#734-semantics","title":"7.3.4 Semantics","text":"<p>Returns the number of records in the recordset or groups of records. Follows the general semantics of aggregate operators.</p>"},{"location":"operators/07-aggregate-operators/#735-additional-constraints","title":"7.3.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/07-aggregate-operators/#736-behaviour","title":"7.3.6 Behaviour","text":"<p>Aggregate operators' general behaviour.</p> <p>Note: Aggregate operators generally ignore null values. This behavior can be overridden by using the nvl operator.</p>"},{"location":"operators/07-aggregate-operators/#74-minimum-value-min_aggr","title":"7.4 Minimum value (min_aggr)","text":""},{"location":"operators/07-aggregate-operators/#741-syntax","title":"7.4.1 Syntax","text":"<pre><code>min_aggr(op {group by groupingId {, groupingId}*})\n</code></pre>"},{"location":"operators/07-aggregate-operators/#742-input-parameters","title":"7.4.2 Input parameters","text":"<ul> <li>op: rset &lt;*&gt;</li> <li>groupingId: scal"},{"location":"operators/07-aggregate-operators/#743-output","title":"7.4.3 Output","text":"<p>rset | scal"},{"location":"operators/07-aggregate-operators/#744-semantics","title":"7.4.4 Semantics","text":"<p>Returns the minimum value of the input values. Follows the general semantics of aggregate operators.</p> <p>For intervals: - The centre is calculated as the minimum value of the all the centers of the operands. - The radius is the radius of the operand that has the minimum centre.</p>"},{"location":"operators/07-aggregate-operators/#745-additional-constraints","title":"7.4.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/07-aggregate-operators/#746-behaviour","title":"7.4.6 Behaviour","text":"<p>Aggregate operators' general behaviour.</p>"},{"location":"operators/07-aggregate-operators/#75-maximum-value-max_aggr","title":"7.5 Maximum value (max_aggr)","text":""},{"location":"operators/07-aggregate-operators/#751-syntax","title":"7.5.1 Syntax","text":"<pre><code>max_aggr(op {group by groupingId {, groupingId}*})\n</code></pre>"},{"location":"operators/07-aggregate-operators/#752-input-parameters","title":"7.5.2 Input parameters","text":"<ul> <li>op: rset &lt;*&gt;</li> <li>groupingId: scal"},{"location":"operators/07-aggregate-operators/#753-output","title":"7.5.3 Output","text":"<p>rset | scal"},{"location":"operators/07-aggregate-operators/#754-semantics","title":"7.5.4 Semantics","text":"<p>Returns the maximum value of the input values. Follows the general semantics of aggregate operators.</p> <p>For intervals: - The centre is calculated as the maximum value of the all the centers of the operands. - The radius is the radius of the operand that has the maximum centre.</p>"},{"location":"operators/07-aggregate-operators/#755-additional-constraints","title":"7.5.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/07-aggregate-operators/#756-behaviour","title":"7.5.6 Behaviour","text":"<p>Aggregate operators' general behaviour.</p>"},{"location":"operators/07-aggregate-operators/#76-average-avg","title":"7.6 Average (avg)","text":""},{"location":"operators/07-aggregate-operators/#761-syntax","title":"7.6.1 Syntax","text":"<pre><code>avg(op {group by groupingId {, groupingId}*})\n</code></pre>"},{"location":"operators/07-aggregate-operators/#762-input-parameters","title":"7.6.2 Input parameters","text":"<ul> <li>op: rset  <li>groupingId: scal"},{"location":"operators/07-aggregate-operators/#763-output","title":"7.6.3 Output","text":"<p>rset | scal"},{"location":"operators/07-aggregate-operators/#764-semantics","title":"7.6.4 Semantics","text":"<p>Returns the average of the input values. Follows the general semantics of aggregate operators.</p>"},{"location":"operators/07-aggregate-operators/#765-additional-constraints","title":"7.6.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/07-aggregate-operators/#766-behaviour","title":"7.6.6 Behaviour","text":"<p>Aggregate operators' general behaviour.</p>"},{"location":"operators/07-aggregate-operators/#77-median-value-median","title":"7.7 Median value (median)","text":""},{"location":"operators/07-aggregate-operators/#771-syntax","title":"7.7.1 Syntax","text":"<pre><code>median(op {group by groupingId {, groupingId}*})\n</code></pre>"},{"location":"operators/07-aggregate-operators/#772-input-parameters","title":"7.7.2 Input parameters","text":"<ul> <li>op: rset  <li>groupingId: scal"},{"location":"operators/07-aggregate-operators/#773-output","title":"7.7.3 Output","text":"<p>rset | scal"},{"location":"operators/07-aggregate-operators/#774-semantics","title":"7.7.4 Semantics","text":"<p>Returns the median of the input values. Follows the general semantics of aggregate operators.</p>"},{"location":"operators/07-aggregate-operators/#775-additional-constraints","title":"7.7.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/07-aggregate-operators/#776-behaviour","title":"7.7.6 Behaviour","text":"<p>Aggregate operators' general behaviour.</p>"},{"location":"operators/08-conditional-operators/","title":"8 Conditional operators","text":""},{"location":"operators/08-conditional-operators/#81-if-then-else","title":"8.1 If-then-else","text":""},{"location":"operators/08-conditional-operators/#811-syntax","title":"8.1.1 Syntax","text":"<pre><code>if conditionExpression then thenExpression {else elseExpression}\n</code></pre>"},{"location":"operators/08-conditional-operators/#812-input-parameters","title":"8.1.2 Input parameters","text":"<ul> <li>conditionExpression: rset | scal  <li>thenExpression: rset | scal &lt;*&gt;</li> <li>elseExpression: rset | scal &lt;*&gt;</li>"},{"location":"operators/08-conditional-operators/#813-output","title":"8.1.3 Output","text":"<p>rset | scal &lt;*&gt;</p>"},{"location":"operators/08-conditional-operators/#814-semantics","title":"8.1.4 Semantics","text":"<p>Returns the thenExpression if the conditionExpression evaluates to true, elseExpression otherwise.</p>"},{"location":"operators/08-conditional-operators/#815-additional-constraints","title":"8.1.5 Additional constraints","text":"<p>The thenExpression and ElseExpression must be of the same data type or a compatible one. In case they are not of the same data type, there shall be implicit casting to the common data type, which will be the data type of the result</p> <p>The thenExpression and elseExpression need to have the same data structure.</p> <p>If the conditionExpression is of recordset type, the data structures of the thenExpresion and elseExpression must contain the same identifiers as the conditionExpression, or a subset of them. The resulting structure will contain the components of the conditionExpression recordset.</p> <p>The following table contains the applicability options for the if-then-else operator:</p> Condition Then Else Is allowed Result structure Remarks Scalar Scalar None Yes Scalar Scalar Recordset None No - Forbidden because the result structure would be unknown Scalar Scalar Scalar Yes Scalar Scalar Scalar Recordset No - Forbidden because the result structure would be unknown Scalar Recordset Scalar No - Forbidden because the result structure would be unknown Scalar Recordset Recordset Yes Recordset Recordset Scalar None Yes Recordset Recordset Recordset None Yes Recordset Recordset Scalar Scalar Yes Recordset Recordset Scalar Recordset Yes Recordset Recordset Recordset Scalar Yes Recordset Recordset Recordset Recordset Yes Recordset"},{"location":"operators/08-conditional-operators/#816-behaviour","title":"8.1.6 Behaviour","text":"<p>For conditionExpressions of the scalar type, returns the operand resulting from the thenExpression or the elseExpression.</p> <p>For conditionExpressions of the recordset type, returns a recordset with the data structure of the conditionExpression, with one output record per input record. The fact values will be the corresponding for the thenExpression or elseExpression, depending on the evaluation result of the condition.</p> <p>If the elseExpression is omitted, a null is returned, except for the case when the thenExpression is of the Boolean data type, in which case true is returned.</p> <p>If the condition evaluates to null, the elseExpression is returned.</p>"},{"location":"operators/08-conditional-operators/#817-examples","title":"8.1.7 Examples","text":""},{"location":"operators/08-conditional-operators/#82-null-substitute-nvl","title":"8.2 Null substitute (nvl)","text":""},{"location":"operators/08-conditional-operators/#821-syntax","title":"8.2.1 Syntax","text":"<pre><code>nvl(op1, op2)\n</code></pre>"},{"location":"operators/08-conditional-operators/#822-input-parameters","title":"8.2.2 Input parameters","text":"<ul> <li>op1: rset | scal &lt;*&gt;</li> <li>op2: rset | scal &lt;*&gt;</li> </ul>"},{"location":"operators/08-conditional-operators/#823-output","title":"8.2.3 Output","text":"<p>rset | scal &lt;*&gt;</p>"},{"location":"operators/08-conditional-operators/#824-semantics","title":"8.2.4 Semantics","text":"<p>Returns op2 when op1 is null, otherwise op1.</p>"},{"location":"operators/08-conditional-operators/#825-additional-constraints","title":"8.2.5 Additional constraints","text":"<p>op1 and op2 need to be of the same type (scalar or recordset) and same data type.</p> <p>If op1 and op2 are of the recorset type, they need to have the same data structure.</p>"},{"location":"operators/08-conditional-operators/#826-behaviour","title":"8.2.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> </ul>"},{"location":"operators/08-conditional-operators/#827-examples","title":"8.2.7 Examples","text":""},{"location":"operators/08-conditional-operators/#83-filter","title":"8.3 Filter","text":""},{"location":"operators/08-conditional-operators/#831-syntax","title":"8.3.1 Syntax","text":"<pre><code>filter(filteredOp, filteringOp)\n</code></pre>"},{"location":"operators/08-conditional-operators/#832-input-parameters","title":"8.3.2 Input parameters","text":"<ul> <li>filteredOp: rset &lt;*&gt;</li> <li>filteringOp: rset"},{"location":"operators/08-conditional-operators/#833-output","title":"8.3.3 Output","text":"<p>rset &lt;*&gt;</p>"},{"location":"operators/08-conditional-operators/#834-semantics","title":"8.3.4 Semantics","text":"<p>Returns the records of the filteredOp recordset for which their matching record in filteringOp evaluates to true.</p>"},{"location":"operators/08-conditional-operators/#835-additional-constraints","title":"8.3.5 Additional constraints","text":"<p>filteringOp must have the same key components as filteredOp or a subset of them.</p>"},{"location":"operators/08-conditional-operators/#836-behaviour","title":"8.3.6 Behaviour","text":"<p>Returns a recordset with the same data structure as filteredOp.</p> <p>An inner join between filteredOp and filteringOp is performed. The records in filteredOp that match to a record in filteringOp with true value are returned.</p>"},{"location":"operators/08-conditional-operators/#837-examples","title":"8.3.7 Examples","text":""},{"location":"operators/09-string-operators/","title":"9 String operators","text":""},{"location":"operators/09-string-operators/#91-length-len","title":"9.1 Length (len)","text":""},{"location":"operators/09-string-operators/#911-syntax","title":"9.1.1 Syntax","text":"<pre><code>len(op)\n</code></pre>"},{"location":"operators/09-string-operators/#912-input-parameters","title":"9.1.2 Input parameters","text":"<ul> <li>op: rset | scal"},{"location":"operators/09-string-operators/#913-output","title":"9.1.3 Output","text":"<p>rset | scal"},{"location":"operators/09-string-operators/#914-semantics","title":"9.1.4 Semantics","text":"<p>Returns the number of characters of the op string.</p>"},{"location":"operators/09-string-operators/#915-additional-constraints","title":"9.1.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/09-string-operators/#916-behaviour","title":"9.1.6 Behaviour","text":"<ul> <li>Unary operators' standard behaviour.</li> </ul>"},{"location":"operators/09-string-operators/#917-examples","title":"9.1.7 Examples","text":"<ul> <li>len(\"test\") results in 4</li> <li>len(NULL) results in NULL</li> </ul>"},{"location":"operators/09-string-operators/#92-concatenate","title":"9.2 Concatenate (&amp;)","text":""},{"location":"operators/09-string-operators/#921-syntax","title":"9.2.1 Syntax","text":"<pre><code>op1 &amp; op2\n</code></pre>"},{"location":"operators/09-string-operators/#922-input-parameters","title":"9.2.2 Input parameters","text":"<ul> <li>op1: rset | scal  <li>op2: rset | scal"},{"location":"operators/09-string-operators/#923-output","title":"9.2.3 Output","text":"<p>rset | scal"},{"location":"operators/09-string-operators/#924-semantics","title":"9.2.4 Semantics","text":"<p>Concatenates two strings.</p>"},{"location":"operators/09-string-operators/#925-additional-constraints","title":"9.2.5 Additional constraints","text":"<p>None.</p>"},{"location":"operators/09-string-operators/#926-behaviour","title":"9.2.6 Behaviour","text":"<ul> <li>Binary operators' standard behaviour.</li> </ul>"},{"location":"operators/09-string-operators/#927-examples","title":"9.2.7 Examples","text":"<ul> <li>\"hello\" &amp; \"world\" results in \"helloworld\"</li> <li>\"test\" &amp; NULL results in NULL</li> </ul>"},{"location":"operators/10-time-operators/","title":"10 Time operators","text":""},{"location":"operators/10-time-operators/#101-time-shift","title":"10.1 Time shift","text":""},{"location":"operators/10-time-operators/#1011-syntax","title":"10.1.1 Syntax","text":"<pre><code>time_shift(op, period, numberPeriods, {var})\n</code></pre>"},{"location":"operators/10-time-operators/#1012-input-parameters","title":"10.1.2 Input parameters","text":"<ul> <li>op: rset &lt;*&gt; | scal  <li>period: scal  <li>numberPeriods: scal  <li>var: scal"},{"location":"operators/10-time-operators/#1013-output","title":"10.1.3 Output","text":"<p>rset &lt;*&gt;</p>"},{"location":"operators/10-time-operators/#1014-semantics","title":"10.1.4 Semantics","text":"<p>Changes the dates of the var component of the recordset op by adding (or subtracting) the numberPeriods of the period type.</p>"},{"location":"operators/10-time-operators/#1015-additional-constraints","title":"10.1.5 Additional constraints","text":"<p>The component var must belong to the recordset op, and has to be of Time interval type.</p> <p>The period must have one of the following values: - A for year - S for semester - Q for quarter - M for month - W for week - D for day</p>"},{"location":"operators/10-time-operators/#1016-behaviour","title":"10.1.6 Behaviour","text":"<p>Returns a recordset with the same data structure and number of records as the input op. The dates for the component var are modified by adding the numberPeriods (subtracting, if negative) of the period type.</p>"},{"location":"operators/10-time-operators/#1017-examples","title":"10.1.7 Examples","text":"<p>Considering the following recordset, generated from the selection {tT1, r010-020, c010-020}:</p> RefDate r c f 2022Q1 010 010 100 2022Q1 010 020 200 2022Q1 010 010 300 2022Q1 010 020 400 2022Q2 020 010 500 2022Q2 020 020 600 2022Q2 020 010 700 2022Q2 020 020 800 <p>time_shift({tT1, r010-020, c010-020}, RefDate, Q, 1) returns:</p> RefDate R c f 2022Q2 010 010 100 2022Q2 010 020 200 2022Q2 010 010 300 2022Q2 010 020 400 2022Q3 020 010 500 2022Q3 020 020 600 2022Q3 020 010 700 2022Q3 020 020 800 <p>time_shift({tT1, r010-020, c010-020}, RefDate, Q, -1) returns:</p> RefDate r c f 2021Q4 010 010 100 2021Q4 010 020 200 2021Q4 010 010 300 2021Q4 010 020 400 2022Q1 020 010 500 2022Q1 020 020 600 2022Q1 020 010 700 2022Q1 020 020 800"},{"location":"operators/11-clause-operators/","title":"11 Clause operators","text":"<p>Clause operators serve to perform operations on the DPM key components of recordsets. Use of clause operators with Standard Key Components are not allowed.</p>"},{"location":"operators/11-clause-operators/#111-where","title":"11.1 where","text":""},{"location":"operators/11-clause-operators/#1111-syntax","title":"11.1.1 Syntax","text":"<pre><code>op[where condition]\n</code></pre>"},{"location":"operators/11-clause-operators/#1112-input-parameters","title":"11.1.2 Input parameters","text":"<ul> <li>op: rset &lt;*&gt;</li> <li>condition: expression"},{"location":"operators/11-clause-operators/#1113-output","title":"11.1.3 Output","text":"<p>rset &lt;*&gt;</p>"},{"location":"operators/11-clause-operators/#1114-semantics","title":"11.1.4 Semantics","text":"<p>Filters a recordset based on the value of a key component.</p>"},{"location":"operators/11-clause-operators/#1115-additional-constraints","title":"11.1.5 Additional constraints","text":"<p>Condition must be a Boolean expression using as input key components of op.</p>"},{"location":"operators/11-clause-operators/#1116-behaviour","title":"11.1.6 Behaviour","text":"<p>Returns a recordset with the same data structure as the input operand, and with the records resulting from the evaluation of the filtering condition. When the condition evaluates to true, the record is kept, otherwise (including null), the record is not kept.</p>"},{"location":"operators/11-clause-operators/#1117-examples","title":"11.1.7 Examples","text":"<p>Considering the following recordset, generated from the selection {tT1, r010-020}:</p> RefDate r CNT f 2022Q1"}]}